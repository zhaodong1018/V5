// Copyright Epic Games, Inc. All Rights Reserved.

float3										SystemLWCTile_{ParameterName};
#if NIAGARA_USE_RAYTRACING
/** Niagara ray tracing uses shared buffers between dispatches so each buffer has a buffer + and offset into that buffer for the current dispatch. */
bool										RayTracingEnabled_{ParameterName};
uint										MaxRayTraceCount_{ParameterName};
RWStructuredBuffer<FNiagaraRayData>			RWRayRequests_{ParameterName};
uint										RayRequestsOffset_{ ParameterName };
StructuredBuffer<FNiagaraRayTracingResult>	IntersectionResults_{ParameterName};
uint										IntersectionResultsOffset_{ ParameterName };
RWBuffer<uint>								RWRayTraceCounts_{ParameterName};
uint										RayTraceCountsOffset_{ ParameterName };
#endif

void QuerySceneDepthGPU_{ParameterName}(in float3 In_SamplePos, out float Out_SceneDepth, out float3 Out_CameraPosWorld, out bool Out_IsInsideView, out float3 Out_WorldPos, out float3 Out_WorldNormal)
{
	NDICollisionQuery_QuerySceneDepthGPU(In_SamplePos, SystemLWCTile_{ParameterName}, Out_SceneDepth, Out_CameraPosWorld, Out_IsInsideView, Out_WorldPos, Out_WorldNormal);
}

void QueryCustomDepthGPU_{ParameterName}(in float3 In_SamplePos, out float Out_SceneDepth, out float3 Out_CameraPosWorld, out bool Out_IsInsideView, out float3 Out_WorldPos, out float3 Out_WorldNormal)
{
	NDICollisionQuery_QueryCustomDepthGPU(In_SamplePos, SystemLWCTile_{ParameterName}, Out_SceneDepth, Out_CameraPosWorld, Out_IsInsideView, Out_WorldPos, Out_WorldNormal);
}

void QueryMeshDistanceFieldGPU_{ParameterName}(in float3 In_SamplePos, out float Out_DistanceToNearestSurface, out float3 Out_FieldGradient, out bool Out_IsDistanceFieldValid)
{
	NDICollisionQuery_QueryMeshDistanceFieldGPU(In_SamplePos, SystemLWCTile_{ParameterName}, Out_DistanceToNearestSurface, Out_FieldGradient, Out_IsDistanceFieldValid);
}

void IssueAsyncRayTraceGpu_{ParameterName}_UEImpureCall(int In_QueryID, float3 In_TraceStart, float3 In_TraceEnd, int In_TraceChannel, out bool Out_IsQueryValid)
{
#if NIAGARA_USE_RAYTRACING
	if (RayTracingEnabled_{ParameterName})
	{
		NDICollisionQuery_IssueAsyncRayTrace(MaxRayTraceCount_{ParameterName}, RWRayRequests_{ParameterName}, RayRequestsOffset_{ ParameterName }, RWRayTraceCounts_{ParameterName}, RayTraceCountsOffset_{ ParameterName }, SystemLWCTile_{ParameterName}, In_QueryID, In_TraceStart, In_TraceEnd, In_TraceChannel, Out_IsQueryValid);
		return;
	}
#endif
	Out_IsQueryValid = false;
}

void ReserveRayTraceIndex_{ParameterName}_UEImpureCall(int In_TraceCount, out int Out_StartQueryID, out bool Out_IndicesValid)
{
#if NIAGARA_USE_RAYTRACING
	if (RayTracingEnabled_{ParameterName})
	{
		NDICollisionQuery_ReserveRayTraceIndex(MaxRayTraceCount_{ParameterName}, RWRayTraceCounts_{ParameterName}, RayTraceCountsOffset_{ ParameterName }, In_TraceCount, Out_StartQueryID, Out_IndicesValid);
		return;
	}
#endif
	Out_IndicesValid = false;
}

void CreateAsyncRayTraceGpu_{ParameterName}_UEImpureCall(float3 In_TraceStart, float3 In_TraceEnd, int In_TraceChannel, out int Out_QueryID, out bool Out_IsQueryValid)
{
#if NIAGARA_USE_RAYTRACING
	if (RayTracingEnabled_{ParameterName})
	{
		NDICollisionQuery_CreateAsyncRayTrace(MaxRayTraceCount_{ParameterName}, RWRayRequests_{ParameterName}, RayRequestsOffset_{ ParameterName }, RWRayTraceCounts_{ParameterName}, RayTraceCountsOffset_{ ParameterName }, SystemLWCTile_{ParameterName}, In_TraceStart, In_TraceEnd, In_TraceChannel, Out_QueryID, Out_IsQueryValid);
		return;
	}
#endif
	Out_IsQueryValid = false;
}

void ReadAsyncRayTraceGpu_{ParameterName}(int In_PreviousFrameQueryID, out bool Out_CollisionValid, out float Out_CollisionDistance, out float3 Out_CollisionPosWorld, out float3 Out_CollisionNormal)
{
#if NIAGARA_USE_RAYTRACING
	if (RayTracingEnabled_{ParameterName})
	{
		NDICollisionQuery_ReadAsyncRayTrace(MaxRayTraceCount_{ParameterName}, IntersectionResults_{ParameterName}, IntersectionResultsOffset_{ParameterName}, SystemLWCTile_{ParameterName}, In_PreviousFrameQueryID, Out_CollisionValid, Out_CollisionDistance, Out_CollisionPosWorld, Out_CollisionNormal);
		return;
	}
#endif
	Out_CollisionValid = false;
}