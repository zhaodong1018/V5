// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"

#include "HairStrandsVisibilityCommon.ush"

#define MESH_RENDER_DEPTH 0
#define MESH_RENDER_DOM   1

struct FDeepShadowAccumulateVSToPS
{
#if SUPPORT_TANGENT_PROPERTY == 1 || SUPPORT_MATERIAL_PROPERTY == 1
	FVertexFactoryInterpolantsVSToPS Interpolants;
#endif
	float4 Position : SV_POSITION;
#if MESH_RENDER_MODE == MESH_RENDER_DOM
	float HairCoverage : CUSTOM_COVERAGE;
#endif
};

#define VS_OUTPUT_TYPE FDeepShadowAccumulateVSToPS
#define SUPPORT_WPO 0

#if VERTEXSHADER 

/** transform mesh as normal */
void Main(
	FVertexFactoryInput Input,
	out VS_OUTPUT_TYPE Output
)
{
	ResolvedView = ResolveView();

	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);

#if MESH_RENDER_MODE == MESH_RENDER_DEPTH || MESH_RENDER_MODE == MESH_RENDER_DOM
	float4x4 WorldToClipMatrix = DeepRasterPass.CPU_WorldToClipMatrix;
#endif

#ifdef HAIR_STRAND_MESH_FACTORY	
	const FHairRenderInfo HairRenderInfo = GetHairRenderInfo(ResolvedView.HairRenderInfo, ResolvedView.HairRenderInfoBits);

	FHairViewInfo HairViewInfo;
	HairViewInfo.TranslatedWorldCameraOrigin = ResolvedView.TranslatedWorldCameraOrigin;
	HairViewInfo.ViewForward = ResolvedView.ViewForward;
	HairViewInfo.RadiusAtDepth1 = HairRenderInfo.RadiusAtDepth1Primary;
	HairViewInfo.bIsOrthoView = HairRenderInfo.bIsOrthoView;

	#if MESH_RENDER_MODE == MESH_RENDER_DEPTH || MESH_RENDER_MODE == MESH_RENDER_DOM
	if (HairRenderInfo.bIsGPUDriven)
	{
		const uint AtlasSlotIndex = DeepRasterPass.AtlasSlotIndex;
		FDeepShadowViewInfo DeepShadowViewInfo = DeepRasterPass.DeepShadowViewInfoBuffer[AtlasSlotIndex];
		WorldToClipMatrix			= DeepShadowViewInfo.WorldToClip;
		HairViewInfo.ViewForward	= DeepShadowViewInfo.ViewForward;
		HairViewInfo.RadiusAtDepth1 = DeepShadowViewInfo.MinRadiusAtDepth1;
	}
	#endif

	float4 WorldPosition = VertexFactoryGetWorldPosition(Input, VFIntermediates, HairViewInfo);
#else
	float4 WorldPosition = VertexFactoryGetWorldPosition(Input, VFIntermediates);
#endif
	WorldPosition.xyz -= LWCHackToFloat(ResolvedView.PreViewTranslation); // Remove the camera relative position (todo move this into matrix transform)

	Output.Position = mul(WorldPosition, WorldToClipMatrix);

	float HairCoverage = 1;
  #ifdef HAIR_STRAND_MESH_FACTORY	
	const float CurrentDepth = Output.Position.z / Output.Position.w;
	const float PixelRadius = HairRenderInfo.bIsOrthoView ? HairRenderInfo.RadiusAtDepth1Primary : (CurrentDepth * HairRenderInfo.RadiusAtDepth1Primary);
	const float StrandRealRadius = VFIntermediates.HairDimensions.y;
	const float Coverage = StrandRealRadius / max(StrandRealRadius, PixelRadius);
	HairCoverage = Coverage * VFIntermediates.HairDensity;
  #endif

  #if MESH_RENDER_MODE == MESH_RENDER_DOM
	Output.HairCoverage = HairCoverage;
  #endif
}

#endif // VERTEXSHADER
