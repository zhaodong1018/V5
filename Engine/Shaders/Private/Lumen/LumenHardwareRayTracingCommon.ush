// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#define SUPPORT_CONTACT_SHADOWS 0
#define USE_HAIR_LIGHTING 0

// Additional rewiring to make DeferredShadingCommon happy
#define LTCMatTexture				RaytracingLightsDataPacked.LTCMatTexture
#define LTCMatSampler				GlobalBilinearClampedSampler
#define LTCAmpTexture				RaytracingLightsDataPacked.LTCAmpTexture
#define LTCAmpSampler				GlobalBilinearClampedSampler
#define PreIntegratedGF				ReflectionStruct.PreIntegratedGF
#define PreIntegratedGFSampler		GlobalBilinearClampedSampler

#include "../SceneData.ush"
#include "../RayTracing/RayTracingCommon.ush"
#include "../RayTracing/RayTracingDeferredMaterials.ush"
#include "../RayTracing/RayTracingDeferredShadingCommon.ush"
#include "../RayTracing/RayTracingLightingCommon.ush"
#include "LumenHardwareRayTracingPayloadCommon.ush"
#include "LumenHardwareRayTracingPlatformCommon.ush"

float3 CalcPrevWorldPositionFromGPUSceneInstanceIndex(float3 WorldPosition, uint GPUSceneInstanceIndex)
{
	FInstanceSceneData InstanceSceneData = GetInstanceSceneData(GPUSceneInstanceIndex, View.InstanceSceneDataSOAStride);
	float4 LocalPosition = mul(float4(WorldPosition, 1), LWCHackToFloat(InstanceSceneData.WorldToLocal));
	float3 PrevWorldPosition = mul(LocalPosition, LWCHackToFloat(InstanceSceneData.PrevLocalToWorld)).xyz;
	return PrevWorldPosition;
}

float3 CalcLocalPositionFromGPUSceneInstanceIndex(float3 WorldPosition, uint GPUSceneInstanceIndex)
{
	FInstanceSceneData InstanceSceneData = GetInstanceSceneData(GPUSceneInstanceIndex, View.InstanceSceneDataSOAStride);
	float3 LocalPosition = mul(float4(WorldPosition, 1), LWCHackToFloat(InstanceSceneData.WorldToLocal)).xyz;
	return LocalPosition;
}

#ifndef ENABLE_NEAR_FIELD_TRACING
#define ENABLE_NEAR_FIELD_TRACING 1
#endif // ENABLE_NEAR_FIELD_TRACING

#ifndef ENABLE_TRANSLUCENT_SKIP_COUNT
#define ENABLE_TRANSLUCENT_SKIP_COUNT 0
#endif // ENABLE_TRANSLUCENT_SKIP_COUNT

// Lighting modes
#define LIGHTING_FROM_SURFACE_CACHE 0
#define EVALUATE_MATERIAL 1
#define EVALUATE_MATERIAL_AND_DIRECT_LIGHTING 2
#define EVALUATE_MATERIAL_AND_DIRECT_LIGHTING_AND_SKY_LIGHTING 3

uint GetAtlasId(int Mode)
{
	uint AtlasId = FINAL_LIGHTING_ATLAS_ID;
	if (Mode == EVALUATE_MATERIAL)
	{
		AtlasId = IRRADIANCE_ATLAS_ID;
	}
	else if (Mode == EVALUATE_MATERIAL_AND_DIRECT_LIGHTING)
	{
		AtlasId = INDIRECT_IRRADIANCE_ATLAS_ID;
	}
	return AtlasId;
}

struct FRayTracedLightingContext
{
	RaytracingAccelerationStructure TLAS;
	FRayCone RayCone;
	uint2 TraceCoord;
	uint LinearCoord;
	uint InstanceMask;
	int TranslucentSkipCountMax;
	float FarFieldMaxTraceDistance;
	float3 FarFieldReferencePos;

	// Whether to sample high res surface cache data or low res always resident pages
	bool bHiResSurface;
	bool bCullBackFacingTriangles;
	bool bAcceptFirstHitAndEndSearch;
	bool bSkipClosestHitShader;
	bool bCalculateHitVelocity;
};

FRayTracedLightingContext CreateRayTracedLightingContext(
	in RaytracingAccelerationStructure TLAS,
	in FRayCone RayCone,
	in uint2 TraceCoord,
	in uint LinearCoord,
	bool bCullBackFacingTriangles,
	in int TranslucentSkipCountMax,
	in bool bHiResSurface
)
{
	FRayTracedLightingContext Context;
	Context.TLAS = TLAS;
	Context.RayCone = RayCone;
	Context.TraceCoord = TraceCoord;
	Context.InstanceMask = RAY_TRACING_MASK_OPAQUE;
	Context.TranslucentSkipCountMax = TranslucentSkipCountMax;
	Context.FarFieldMaxTraceDistance = -1.0;
	Context.FarFieldReferencePos = 0;
	Context.bHiResSurface = bHiResSurface;
	Context.bCullBackFacingTriangles = bCullBackFacingTriangles;
	Context.bAcceptFirstHitAndEndSearch = false;
	Context.bSkipClosestHitShader = false;
	Context.bCalculateHitVelocity = false;
	return Context;
}

FRayTracedLightingContext CreateRayTracedLightingContext(
	in RaytracingAccelerationStructure TLAS,
	in FRayCone RayCone,
	in uint2 TraceCoord,
	in uint LinearCoord,
	bool bCullBackFacingTriangles,
	in int TranslucentSkipCountMax
)
{
	bool bHiResSurface = false;
	return CreateRayTracedLightingContext(TLAS, RayCone, TraceCoord, LinearCoord, bCullBackFacingTriangles, TranslucentSkipCountMax, bHiResSurface);
}

FRayTracedLightingContext CreateRayTracedLightingContext(
	in RaytracingAccelerationStructure TLAS,
	in FRayCone RayCone,
	in uint2 TraceCoord,
	in uint LinearCoord,
	bool bCullBackFacingTriangles
)
{
	int TranslucentSkipCountMax = 0;
	bool bHiResSurface = false;
	return CreateRayTracedLightingContext(TLAS, RayCone, TraceCoord, LinearCoord, bCullBackFacingTriangles, TranslucentSkipCountMax, bHiResSurface);
}

struct FRayTracedLightingResult
{
	bool bIsHit;
	bool bIsFarField;
	float TraceHitDistance;
	float3 Radiance;

	float3 WorldVelocity;
	uint MeshCardsIndex;
	uint MaterialShaderIndex;
};

FRayTracedLightingResult CreateRayTracedLightingResult()
{
	FRayTracedLightingResult Result;
	Result.bIsHit = false;
	Result.bIsFarField = false;
	Result.TraceHitDistance = 0;
	Result.Radiance = 0;
	Result.WorldVelocity = 0;
	Result.MeshCardsIndex = LUMEN_INVALID_CARD_INDEX;
	Result.MaterialShaderIndex = RAY_TRACING_DEFERRED_MATERIAL_KEY_INVALID;

	return Result;
}

bool TraceDeferredMaterialRay(
	in RayDesc Ray,
	inout FRayTracedLightingContext Context,
	inout FDeferredMaterialPayload DeferredMaterialPayload
)
{
	DeferredMaterialPayload = (FDeferredMaterialPayload)0;
	DeferredMaterialPayload.SortKey = RAY_TRACING_DEFERRED_MATERIAL_KEY_RAY_MISS;
	DeferredMaterialPayload.PixelCoordinates = (Context.TraceCoord.y << 16) | Context.TraceCoord.x;

	uint RayFlags = RAY_FLAG_FORCE_OPAQUE;
	RayFlags |= Context.bCullBackFacingTriangles ? RAY_FLAG_CULL_BACK_FACING_TRIANGLES : 0;

	FRayIntersectionBookmark Bookmark = (FRayIntersectionBookmark)0;
	TraceDeferredMaterialGatherRay(Context.TLAS, RayFlags, Context.InstanceMask, Ray, Bookmark, DeferredMaterialPayload);

	return DeferredMaterialPayload.IsHit();
}

bool TraceLumenMinimalRay(
	in RayDesc Ray,
	inout FRayTracedLightingContext Context,
	inout FLumenMinimalPayload Payload
)
{
	Payload = (FLumenMinimalPayload)0;
	
	// UE_RAY_TRACING_LIGHTWEIGHT_CLOSEST_HIT_SHADER is required to trace TraceLumenMinimalRay for performance reasons
	#if UE_RAY_TRACING_LIGHTWEIGHT_CLOSEST_HIT_SHADER == 0
	{
		// Return a X hit pattern if define wasn't set
		const bool TileX = Context.TraceCoord.x % 4 < 2;
		const bool TileY = Context.TraceCoord.y % 4 < 2;
		if (TileX ^ TileY)
		{
			Payload.HitT = Ray.TMin;
		}
		else
		{
			Payload.SetMiss();	
		}		
		return Payload.IsHit();
	}
	#endif

	uint RayFlags = RAY_FLAG_FORCE_OPAQUE;
	RayFlags |= Context.bCullBackFacingTriangles ? RAY_FLAG_CULL_BACK_FACING_TRIANGLES : 0;
	RayFlags |= Context.bAcceptFirstHitAndEndSearch ? RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH : 0;
	RayFlags |= Context.bSkipClosestHitShader ? RAY_FLAG_SKIP_CLOSEST_HIT_SHADER : 0;

	TraceLumenRay(Context.TLAS, RayFlags, Context.InstanceMask, RAY_TRACING_SHADER_SLOT_MATERIAL, RAY_TRACING_NUM_SHADER_SLOTS, 0, Ray, Payload);

	return Payload.IsHit();
}

float3 CalculateSurfaceCacheLighting(
	in RayDesc Ray,
	in FRayTracedLightingContext Context,
	float3 RayHitWorldPosition,
	float3 RayHitWorldNormal,
	bool bAccurateHit,
	float HitDistance,
	uint SceneInstanceIndex,
	float3 DiffuseColor,
	int LightingMode,
	inout uint MeshCardsIndex
)
{
	float3 Radiance = 0;

	float InterpolateRadius = tan(Context.RayCone.SpreadAngle) * HitDistance;
	//@todo - derive from card texel size
	float CardInterpolateDepthVisibilityRadius = 10;
	// Mode and AtlasId enums are coupled
	uint AtlasId = GetAtlasId(LightingMode);

	FSurfaceCacheSample SurfaceCacheSample = SampleLumenMeshCards(
		Context.TraceCoord,
		SceneInstanceIndex,
		RayHitWorldPosition,
		RayHitWorldNormal,
		InterpolateRadius,
		bAccurateHit,
		CardInterpolateDepthVisibilityRadius,
		Context.bHiResSurface,
		AtlasId
	);
	MeshCardsIndex = SurfaceCacheSample.MeshCardsIndex;

	// Apply shading when evaluating the material
	if (LightingMode != LIGHTING_FROM_SURFACE_CACHE)
	{
		SurfaceCacheSample.Lighting *= Diffuse_Lambert(DiffuseColor);
	}
	Radiance += SurfaceCacheSample.Lighting;

	return Radiance;
}

float3 CalculateDirectLighting(
	in RayDesc Ray,
	in FRayTracedLightingContext Context,
	inout FPackedMaterialClosestHitPayload Payload,
	float3 RayHitWorldPosition,
	float3 RayHitWorldNormal
)
{
	RandomSequence RandSequence;
	uint SampleOffset = 0;
	RandomSequence_Initialize(RandSequence, Context.LinearCoord, View.StateFrameIndex + SampleOffset * 16);
	float MaxNormalBias = 0.05;
	uint ReflectedShadowsType = 2;
	bool bShouldDoDirectLighting = true;
	bool bShouldDoEmissiveAndIndirectLighting = false;
	bool bTopLayerRayTraceSkyLightContribution = false;
	bool bDecoupleSampleGeneration = false;

	float3 DirectLighting = 0.0f;
	AccumulateResults(
		Payload,
		RayHitWorldPosition,
		Ray.Direction,
		Context.TLAS,
		RandSequence,
		Context.TraceCoord,
		MaxNormalBias,
		ReflectedShadowsType,
		bShouldDoDirectLighting,
		bShouldDoEmissiveAndIndirectLighting,
		bTopLayerRayTraceSkyLightContribution,
		bDecoupleSampleGeneration,
		Context.RayCone,
		DirectLighting);
	return DirectLighting;
}

float3 CalculateRayTracedLightingFromSurfaceCache(
	in RayDesc Ray,
	in FRayTracedLightingContext Context,
	FLumenMinimalPayload Payload,
	float HitDistance,
	uint SceneInstanceIndex,
	inout uint MeshCardsIndex
)
{
	float3 Radiance = 0;

	bool bAccurateHit = false;
	float3 RayHitWorldNormal = Payload.GetWorldNormal();
	float3 RayHitWorldPosition = Ray.Origin + Ray.Direction * HitDistance;
	float3 DiffuseColor = 0;
	Radiance += CalculateSurfaceCacheLighting(Ray, Context, RayHitWorldPosition, RayHitWorldNormal, bAccurateHit, HitDistance, SceneInstanceIndex, DiffuseColor, LIGHTING_FROM_SURFACE_CACHE, MeshCardsIndex);
	return Radiance;
}

float3 CalculateRayTracedLighting(
	in RayDesc Ray,
	in FRayTracedLightingContext Context,
	inout FPackedMaterialClosestHitPayload Payload,
	float HitDistance,
	uint SceneInstanceIndex,
	int LightingMode
)
{
	// Apply emissive material
	float3 Radiance = Payload.GetRadiance() * Payload.GetOpacity();

	bool bAccurateHit = false;
	float3 RayHitWorldNormal = Payload.GetWorldNormal();

	float3 RayHitWorldPosition = Ray.Origin + Ray.Direction * HitDistance;
	if (LightingMode >= EVALUATE_MATERIAL_AND_DIRECT_LIGHTING)
	{
		Radiance += CalculateDirectLighting(Ray, Context, Payload, RayHitWorldPosition, RayHitWorldNormal);
	}

	float3 DiffuseColor = Payload.GetDiffuseColor();

	if (LightingMode == EVALUATE_MATERIAL_AND_DIRECT_LIGHTING_AND_SKY_LIGHTING)
	{
		Radiance += DiffuseColor * Payload.GetIndirectIrradiance();
	}
	else
	{
		uint MeshCardsIndex;
		Radiance += CalculateSurfaceCacheLighting(Ray, Context, RayHitWorldPosition, RayHitWorldNormal, bAccurateHit, HitDistance, SceneInstanceIndex, DiffuseColor, LightingMode, MeshCardsIndex);
	}
	return Radiance;
}

FRayTracedLightingResult TraceAndCalculateRayTracedLighting(
	in RayDesc Ray,
	in FRayTracedLightingContext Context,
	int LightingMode
)
{
	FRayTracedLightingResult Result = CreateRayTracedLightingResult();
	Result.TraceHitDistance = Ray.TMax;

	uint RayFlags = 0;
	bool bEnableSkyLightContribution = LightingMode == EVALUATE_MATERIAL_AND_DIRECT_LIGHTING_AND_SKY_LIGHTING;

	FPackedMaterialClosestHitPayload Payload = (FPackedMaterialClosestHitPayload)0;
	Payload.SetLumenPayload();
	Payload.SetIgnoreTranslucentMaterials();
	if (LightingMode == LIGHTING_FROM_SURFACE_CACHE)
	{
		Payload.SetMinimalPayloadMode();
	}

	// Permute ray origin if tracing against far-field
	float3 RayOrigin = Ray.Origin;
	Ray.Origin += Context.InstanceMask == RAY_TRACING_MASK_FAR_FIELD ? Context.FarFieldReferencePos : 0.0;

	// Trace visibility ray
	TraceMaterialRayPacked(
		Payload,
		Context.TLAS,
		RayFlags,
		Context.InstanceMask,
		Ray,
		Context.RayCone,
		Context.TraceCoord,
		bEnableSkyLightContribution);

	Ray.Origin = RayOrigin;
	Result.bIsHit = Payload.IsHit();
	if (Result.bIsHit)
	{
		uint SceneInstanceIndex = Payload.GetSceneInstanceIndex();
		Result.TraceHitDistance = Payload.HitT;
		Result.Radiance = CalculateRayTracedLighting(Ray, Context, Payload, Result.TraceHitDistance, SceneInstanceIndex, LightingMode);
	}

	return Result;
}

FRayTracedLightingResult TraceAndCalculateRayTracedLightingFromSurfaceCache(
	in RayDesc Ray,
	in FRayTracedLightingContext Context
)
{
	FRayTracedLightingResult Result = CreateRayTracedLightingResult();
	Result.TraceHitDistance = Ray.TMax;

	FLumenMinimalPayload Payload = (FLumenMinimalPayload)0;

#if ENABLE_NEAR_FIELD_TRACING
	Result.bIsHit = TraceLumenMinimalRay(Ray, Context, Payload);

#if ENABLE_TRANSLUCENT_SKIP_COUNT
	int TranslucentSkipCount = 0;
	while (Result.bIsHit && Payload.IsTranslucent() && TranslucentSkipCount < Context.TranslucentSkipCountMax)
	{
		float Epsilon = 0.01;
		Ray.TMin = Payload.HitT + Epsilon;
		Result.bIsHit = TraceLumenMinimalRay(Ray, Context, Payload);
		TranslucentSkipCount++;
	}
#endif // ENABLE_TRANSLUCENT_SKIP_COUNT

	if (Result.bIsHit)
	{
		Result.TraceHitDistance = Payload.HitT;
		Result.MaterialShaderIndex = Payload.GetMaterialShaderIndex();

		if (Context.bCalculateHitVelocity)
		{
			uint GPUSceneInstanceIndex = GetGPUSceneInstanceIndex(Payload.GetPrimitiveIndex(), Payload.GetInstanceIndex());
			float3 WorldPosition = Ray.Origin + Ray.Direction * Payload.HitT;
			Result.WorldVelocity = WorldPosition - CalcPrevWorldPositionFromGPUSceneInstanceIndex(WorldPosition, GPUSceneInstanceIndex);
		}

		uint SceneInstanceIndex = GetGPUSceneInstanceIndex(Payload.GetPrimitiveIndex(), Payload.GetInstanceIndex());
		Result.Radiance = CalculateRayTracedLightingFromSurfaceCache(Ray, Context, Payload, Result.TraceHitDistance, SceneInstanceIndex, Result.MeshCardsIndex);
	}
#endif

#if ENABLE_FAR_FIELD_TRACING
	if (!Result.bIsHit)
	{
		Ray.Origin += Context.FarFieldReferencePos;
		Ray.TMin = Ray.TMax;
		Ray.TMax = Context.FarFieldMaxTraceDistance;
		Context.InstanceMask = RAY_TRACING_MASK_FAR_FIELD;
		Result.bIsHit = TraceLumenMinimalRay(Ray, Context, Payload);
		if (Result.bIsHit)
		{
			Result.TraceHitDistance = Payload.HitT;
			Result.MaterialShaderIndex = Payload.GetMaterialShaderIndex();
			Result.bIsFarField = true;
		}
	}
#endif // ENABLE_FAR_FIELD_TRACING
	return Result;
}
