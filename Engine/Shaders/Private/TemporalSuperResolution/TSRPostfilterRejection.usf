// Copyright Epic Games, Inc. All Rights Reserved.

#include "TSRCommon.ush"


//------------------------------------------------------- CONFIG

#define TILE_SIZE 8

#define CONFIG_OUTPUT_HALF_RES DIM_OUTPUT_HALF_RES


//------------------------------------------------------- PARAMETERS

uint4 HistoryRejectionViewport;

Texture2D<taa_half> HistoryRejectionTexture;
RWTexture2D<taa_half> HistoryRejectionOutput;


//------------------------------------------------------- LDS

groupshared taa_half SharedRejection[TILE_SIZE * TILE_SIZE];


//------------------------------------------------------- FUNCTIONS

// Operator that output, lowest, median and highest values from 3 input values.
void LMHOperator(taa_half A, taa_half B, taa_half C, out taa_half L, out taa_half M, out taa_half H)
{
	// TODO: min3, max3, med3.
	taa_half X = min(B, C);
	taa_half Y = max(B, C);
	
	L = min(A, X);
	taa_half Z = max(A, X);

	M = min(Z, Y);
	H = max(Z, Y);
}

// 3 samples median.
taa_half Median(taa_half A, taa_half B, taa_half C)
{
	// TODO: med3.
	taa_half L, M, H;
	LMHOperator(A, B, C, L, M, H);
	return M;
}

// 9 samples median using Smith1996.
taa_half Median9(taa_half In[9])
{
	// First layer.
	taa_half L0[3];
	taa_half M0[3];
	taa_half H0[3];
	for (uint j = 0; j < 3; j++)
	{
		LMHOperator(In[j * 3 + 0], In[j * 3 + 1], In[j * 3 + 2], L0[j], M0[j], H0[j]);
	}
	
	// Second layer.
	// TODO: min3, max3.
	taa_half M1[3];
	M1[0] = max(max(L0[0], L0[1]), L0[2]);
	M1[1] = Median(M0[0], M0[1], M0[2]);
	M1[2] = min(min(H0[0], H0[1]), H0[2]);
	
	// Third layer.
	return Median(M1[0], M1[1], M1[2]);
}


//------------------------------------------------------- ENTRY POINT

[numthreads(TILE_SIZE, TILE_SIZE, 1)]
void MainCS(
	uint2 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	float4 Debug = 0.0;

	taa_short2 RejectionPixelPos = (
		taa_short2(GroupId) * taa_short2(TILE_SIZE, TILE_SIZE) +
		Map8x8Tile2x2Lane(GroupThreadIndex));

	RejectionPixelPos = ClampPixelOffset(RejectionPixelPos, HistoryRejectionViewport.xy, HistoryRejectionViewport.zw - 1);

	// Fetch neighborhood of the kernel
	taa_half InSamples[9];
	UNROLL
	for (uint i = 0; i < 9; i++)
	{
		taa_short2 SampleInputPixelPos = AddAndClampPixelOffset(
			RejectionPixelPos,
			kOffsets3x3[i], kOffsets3x3[i],
			HistoryRejectionViewport.xy, HistoryRejectionViewport.zw - 1);

		InSamples[i] = HistoryRejectionTexture[SampleInputPixelPos];
	}

	taa_half Rejection = Median9(InSamples);

	#if CONFIG_OUTPUT_HALF_RES
	{
		SharedRejection[GroupThreadIndex] = Rejection;

		GroupMemoryBarrierWithGroupSync();

		UNROLL
		for (uint i = 1; i < 4; i++)
		{
			uint ButterflySwap = i;

			Rejection = min(Rejection, SharedRejection[GroupThreadIndex ^ ButterflySwap]);
		}
		
		bool bIsValid = all(RejectionPixelPos <= taa_short2(HistoryRejectionViewport.zw)) && all((taa_ushort2(RejectionPixelPos) % taa_ushort(2)) == taa_ushort(0));

		taa_ushort2 OutputPixelPos = taa_ushort2(RejectionPixelPos) / taa_ushort(2);
		OutputPixelPos.x = bIsValid ? OutputPixelPos.x : ~taa_ushort(0);

		HistoryRejectionOutput[OutputPixelPos] = Rejection;
	}
	#else
	{
		taa_short2 OutputPixelPos = InvalidateOutputPixelPos(RejectionPixelPos, HistoryRejectionViewport.zw);
		HistoryRejectionOutput[OutputPixelPos] = Rejection;
	}
	#endif
	
	#if DEBUG_OUTPUT
	{
		taa_short2 OutputPixelPos = InvalidateOutputPixelPos(RejectionPixelPos, HistoryRejectionViewport.zw);
		DebugOutput[OutputPixelPos] = Debug;
	}
	#endif
}
