// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	GlobalDistanceFieldShared.ush
=============================================================================*/

#if FEATURE_LEVEL >= FEATURE_LEVEL_SM5

#if IS_MATERIAL_SHADER
	#define DISTANCE_FIELD_IN_VIEW_UB 1
#endif

#if DISTANCE_FIELD_IN_VIEW_UB
	#define MaxGlobalDFAOConeDistance View.MaxGlobalDFAOConeDistance
#else
	float MaxGlobalDFAOConeDistance;
#endif

#if PLATFORM_SUPPORTS_DISTANCE_FIELDS

// Must match C++
// Most functions in this file still using 4 to match legacy
#define MAX_GLOBAL_DF_CLIPMAPS 5

#if DISTANCE_FIELD_IN_VIEW_UB
    // for materials, these are in the view UB
	#define GlobalDistanceFieldPageAtlasTexture			View.GlobalDistanceFieldPageAtlasTexture
	#define GlobalDistanceFieldPageTableTexture			View.GlobalDistanceFieldPageTableTexture
	#define GlobalDistanceFieldMipTexture				View.GlobalDistanceFieldMipTexture
	#define GlobalVolumeCenterAndExtent					View.GlobalVolumeCenterAndExtent
	#define GlobalVolumeWorldToUVAddAndMul				View.GlobalVolumeWorldToUVAddAndMul
	#define GlobalDistanceFieldMipWorldToUVScale		View.GlobalDistanceFieldMipWorldToUVScale
	#define GlobalDistanceFieldMipWorldToUVBias			View.GlobalDistanceFieldMipWorldToUVBias
	#define GlobalDistanceFieldMipFactor				View.GlobalDistanceFieldMipFactor
	#define GlobalDistanceFieldMipTransition			View.GlobalDistanceFieldMipTransition
	#define GlobalDistanceFieldInvPageAtlasSize			View.GlobalDistanceFieldInvPageAtlasSize
	#define GlobalDistanceFieldClipmapSizeInPages		View.GlobalDistanceFieldClipmapSizeInPages
	#define GlobalVolumeDimension						View.GlobalVolumeDimension
	#define GlobalVolumeTexelSize						View.GlobalVolumeTexelSize
	#define NumGlobalSDFClipmaps						View.NumGlobalSDFClipmaps

#else
	// these are only used for the precomputation shaders; which don't have a view UB
	Texture3D GlobalDistanceFieldPageAtlasTexture;
	Texture3D<uint> GlobalDistanceFieldPageTableTexture;
	Texture3D GlobalDistanceFieldMipTexture;
	float4 GlobalVolumeCenterAndExtent[MAX_GLOBAL_DF_CLIPMAPS];
	float4 GlobalVolumeWorldToUVAddAndMul[MAX_GLOBAL_DF_CLIPMAPS];
	float4 GlobalDistanceFieldMipWorldToUVScale[MAX_GLOBAL_DF_CLIPMAPS];
	float4 GlobalDistanceFieldMipWorldToUVBias[MAX_GLOBAL_DF_CLIPMAPS];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	uint GlobalDistanceFieldClipmapSizeInPages;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	uint NumGlobalSDFClipmaps;
#endif

// Must match GlobalDistanceField.cpp
#define GLOBAL_DISTANCE_FIELD_PAGE_RESOLUTION_IN_ATLAS 16 // Includes 1 texel bilinear filter margin
#define GLOBAL_DISTANCE_FIELD_PAGE_RESOLUTION (GLOBAL_DISTANCE_FIELD_PAGE_RESOLUTION_IN_ATLAS - 2)
#define GLOBAL_DISTANCE_FIELD_PAGE_ATLAS_SIZE_IN_PAGES_X 32
#define GLOBAL_DISTANCE_FIELD_PAGE_ATLAS_SIZE_IN_PAGES_Y 32
#define GLOBAL_DISTANCE_FIELD_INFLUENCE_RANGE_IN_VOXELS 4
#define GLOBAL_DISTANCE_FIELD_INVALID_PAGE_ID 0xFFFF

uint3 GlobalDistanceFieldPageLinearIndexToPageAtlasCoord(uint PageLinearIndex)
{
	uint3 PageAtlasCoord;
	//PageAtlasCoord.x = (PageLinearIndex % GLOBAL_DISTANCE_FIELD_PAGE_ATLAS_SIZE_IN_PAGES_X);
	//PageAtlasCoord.y = ((PageLinearIndex / GLOBAL_DISTANCE_FIELD_PAGE_ATLAS_SIZE_IN_PAGES_X) % GLOBAL_DISTANCE_FIELD_PAGE_ATLAS_SIZE_IN_PAGES_Y);
	//PageAtlasCoord.z = ((PageLinearIndex / GLOBAL_DISTANCE_FIELD_PAGE_ATLAS_SIZE_IN_PAGES_X) / GLOBAL_DISTANCE_FIELD_PAGE_ATLAS_SIZE_IN_PAGES_Y);

	// Same as above, but with bit operations
	PageAtlasCoord.x = PageLinearIndex & 0x1F;
	PageAtlasCoord.y = (PageLinearIndex >> 5) & 0x1F;
	PageAtlasCoord.z = PageLinearIndex >> 10;

	return PageAtlasCoord * GLOBAL_DISTANCE_FIELD_PAGE_RESOLUTION_IN_ATLAS;
}

uint GetGlobalDistanceFieldPage(float3 VolumeUV, uint ClipmapIndex)
{
	int4 PageTableCoord = int4(saturate(VolumeUV) * GlobalDistanceFieldClipmapSizeInPages + int3(0, 0, ClipmapIndex * GlobalDistanceFieldClipmapSizeInPages), 0);

	uint PageIndex = GlobalDistanceFieldPageTableTexture.Load(PageTableCoord);
	return PageIndex;
}

float3 ComputeGlobalDistanceFieldPageUV(float3 VolumeUV, uint PageIndex)
{
	uint3 PageAtlasCoord = GlobalDistanceFieldPageLinearIndexToPageAtlasCoord(PageIndex);

	float3 PageCoord = PageAtlasCoord;
	PageCoord += frac(VolumeUV * GlobalDistanceFieldClipmapSizeInPages) * GLOBAL_DISTANCE_FIELD_PAGE_RESOLUTION + 1.0f;

	float3 PageUV = PageCoord * GlobalDistanceFieldInvPageAtlasSize;
	return PageUV;
}

float EncodeGlobalDistanceFieldPageDistance(float Distance, float ClipmapInfluenceRange)
{
	return saturate(Distance / (2.0f * ClipmapInfluenceRange) + 0.5f);
}

float DecodeGlobalDistanceFieldPageDistance(float EncodedDistance, float ClipmapInfluenceRange)
{
	return (EncodedDistance * 2.0f - 1.0f) * ClipmapInfluenceRange;
}

float3 ComputeGlobalUV(float3 WorldPosition, uint ClipmapIndex)
{
	//return ((WorldPosition - GlobalVolumeCenterAndExtent[ClipmapIndex].xyz + GlobalVolumeScollOffset[ClipmapIndex].xyz) / (GlobalVolumeCenterAndExtent[ClipmapIndex].w * 2) + .5f);
	float4 WorldToUVAddAndMul = GlobalVolumeWorldToUVAddAndMul[ClipmapIndex];
	return frac(WorldPosition * WorldToUVAddAndMul.www + WorldToUVAddAndMul.xyz);
}

float3 ComputeGlobalMipUV(float3 WorldPosition, uint ClipmapIndex)
{
	return saturate(WorldPosition * GlobalDistanceFieldMipWorldToUVScale[ClipmapIndex].xyz + GlobalDistanceFieldMipWorldToUVBias[ClipmapIndex].xyz);
}

float GetDistanceToNearestSurfaceGlobal(float3 WorldPosition)
{
	float Distance = 0.0f;

	for (uint ClipmapIndex = 0; ClipmapIndex < NumGlobalSDFClipmaps; ClipmapIndex++)
	{
		float DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[ClipmapIndex].xyz, GlobalVolumeCenterAndExtent[ClipmapIndex].www, WorldPosition);
		const float ClipmapVoxelExtent = GlobalVolumeCenterAndExtent[ClipmapIndex].w * GlobalVolumeTexelSize;
		const float ClipmapInfluenceRange = 2.0f * GLOBAL_DISTANCE_FIELD_INFLUENCE_RANGE_IN_VOXELS * ClipmapVoxelExtent;

		Distance = ClipmapInfluenceRange;

		if (DistanceFromClipmap > ClipmapVoxelExtent)
		{
			float3 ClipmapVolumeUV = frac(ComputeGlobalUV(WorldPosition, ClipmapIndex));

			uint PageIndex = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);

			if (PageIndex < GLOBAL_DISTANCE_FIELD_INVALID_PAGE_ID)
			{
				float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, PageIndex);

				float DistanceFieldValue = Texture3DSampleLevel(GlobalDistanceFieldPageAtlasTexture, GlobalTrilinearWrappedSampler, PageUV, 0).x;

				if (DistanceFieldValue < 1.0f)
				{
					Distance = DecodeGlobalDistanceFieldPageDistance(DistanceFieldValue, ClipmapInfluenceRange);
					break;
				}
			}
		}
	}

	return Distance;
}

float SampleGlobalDistanceField(float3 WorldPosition, float MaxDistance, int MinClipmapIndex)
{
	float Distance = MaxDistance;

	for (uint ClipmapIndex = MinClipmapIndex; Distance <= MaxDistance && ClipmapIndex < NumGlobalSDFClipmaps; ++ClipmapIndex)
	{
		const float ClipmapInfluenceRange = GLOBAL_DISTANCE_FIELD_INFLUENCE_RANGE_IN_VOXELS * 2.0f * GlobalVolumeCenterAndExtent[ClipmapIndex].w * GlobalVolumeTexelSize;
		
		float3 ClipmapVolumeUV = frac(ComputeGlobalUV(WorldPosition, ClipmapIndex));
		uint PageIndex = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);

		if (PageIndex < GLOBAL_DISTANCE_FIELD_INVALID_PAGE_ID)
		{
			float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, PageIndex);

			float DistanceFieldValue = Texture3DSampleLevel(GlobalDistanceFieldPageAtlasTexture, GlobalTrilinearWrappedSampler, PageUV, 0).x;

			if (DistanceFieldValue < 1.0f)
			{
				Distance = DecodeGlobalDistanceFieldPageDistance(DistanceFieldValue, ClipmapInfluenceRange);
				break;
			}
		}
	}

	return Distance;
}

float3 GlobalDistanceFieldPageCentralDiff(float3 PageUV)
{
	// Distance field pages have a 1 texel border and can't bilinear sample further than 0.5 texel from that border
	float3 TexelOffset = 0.5f * GlobalDistanceFieldInvPageAtlasSize;

	float R = Texture3DSampleLevel(GlobalDistanceFieldPageAtlasTexture, GlobalTrilinearWrappedSampler, float3(PageUV.x + TexelOffset.x, PageUV.y, PageUV.z), 0).x;
	float L = Texture3DSampleLevel(GlobalDistanceFieldPageAtlasTexture, GlobalTrilinearWrappedSampler, float3(PageUV.x - TexelOffset.x, PageUV.y, PageUV.z), 0).x;
	float F = Texture3DSampleLevel(GlobalDistanceFieldPageAtlasTexture, GlobalTrilinearWrappedSampler, float3(PageUV.x, PageUV.y + TexelOffset.y, PageUV.z), 0).x;
	float B = Texture3DSampleLevel(GlobalDistanceFieldPageAtlasTexture, GlobalTrilinearWrappedSampler, float3(PageUV.x, PageUV.y - TexelOffset.y, PageUV.z), 0).x;
	float U = Texture3DSampleLevel(GlobalDistanceFieldPageAtlasTexture, GlobalTrilinearWrappedSampler, float3(PageUV.x, PageUV.y, PageUV.z + TexelOffset.z), 0).x;
	float D = Texture3DSampleLevel(GlobalDistanceFieldPageAtlasTexture, GlobalTrilinearWrappedSampler, float3(PageUV.x, PageUV.y, PageUV.z - TexelOffset.z), 0).x;

	return float3(R - L, F - B, U - D);
}

// Returns vector (unnormalized) to the nearest surface point.
// This vector is rescaled by 128 * GlobalVolumeTexelSize for backwards compatiblity.
float3 GetDistanceFieldGradientGlobal(float3 WorldPosition)
{
	float3 Gradient = float3(0, 0, 0.001f);

	for (uint ClipmapIndex = 0; ClipmapIndex < NumGlobalSDFClipmaps; ClipmapIndex++)
	{
		const float ClipmapVoxelExtent = GlobalVolumeCenterAndExtent[ClipmapIndex].w * GlobalVolumeTexelSize;
		const float DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[ClipmapIndex].xyz, GlobalVolumeCenterAndExtent[ClipmapIndex].www, WorldPosition);

		if (DistanceFromClipmap >= ClipmapVoxelExtent)
		{
			const float3 ClipmapVolumeUV = frac(ComputeGlobalUV(WorldPosition, ClipmapIndex));

			uint PageIndex = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);

			if (PageIndex < GLOBAL_DISTANCE_FIELD_INVALID_PAGE_ID)
			{
				float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, PageIndex);

				float DistanceFieldValue = Texture3DSampleLevel(GlobalDistanceFieldPageAtlasTexture, GlobalTrilinearWrappedSampler, PageUV, 0).x;

				// Find a page which where narrow band isn't clipped
				if (DistanceFieldValue < 0.9f)
				{
					float3 PageCentralDiff = GlobalDistanceFieldPageCentralDiff(PageUV);

					const float ClipmapInfluenceRange = GLOBAL_DISTANCE_FIELD_INFLUENCE_RANGE_IN_VOXELS * 2.0f * ClipmapVoxelExtent;
					const float PageDistanceDecodeFactor = 2.0f * ClipmapInfluenceRange;
					float ClipmapExtent = GlobalVolumeCenterAndExtent[ClipmapIndex].w;

					// Rescale to keep backwards compatability
					const float BackwardsCompatibilityFactor = 128.0f * GlobalVolumeTexelSize;
					Gradient = PageDistanceDecodeFactor * PageCentralDiff / (ClipmapExtent * BackwardsCompatibilityFactor);

					break;
				}
			}
		}
	}

	return Gradient;
}

#else

float GetDistanceToNearestSurfaceGlobal(float3 WorldPosition)
{
	return MaxGlobalDFAOConeDistance;
}

float3 GetDistanceFieldGradientGlobal(float3 WorldPosition)
{
	return float3(0, 0, .001f);
}

#endif
#endif // FEATURE_LEVEL >= FEATURE_LEVEL_SM5
