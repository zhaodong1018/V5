// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "../ShaderPrintCommon.ush"
#include "PageOverlap.ush"

StructuredBuffer<uint>	InStatsBuffer;
StructuredBuffer<uint4> AllocatedPageRectBounds;

float2 ShaderPrintLeftAlign(float2 ScreenPos, uint Value)
{
	int Len = 9;
	
	uint Tmp = Value;
	while (Tmp >= 10)
	{
		Tmp /= 10;
		Len--;
	}

	while (Len > 0)
	{
		ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
		Len--;
	}
		

	return ShaderPrint(ScreenPos, Value);
}

[numthreads(1, 1, 1)]
void PrintStats()
{
	float TopMargin = 0.05f;
	float HeadlineX = 0.47f;
	float ItemX = 0.48f;
	float ValueX = 0.58f;
	float2 ScreenPos = float2(HeadlineX, TopMargin);

	ScreenPos.x = ItemX;
	ScreenPos = ShaderPrintSymbol(ScreenPos, _M_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _A_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _X_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _P_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _A_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _G_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _E_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _S_);
	ScreenPos.x = ValueX;
	ScreenPos = ShaderPrintLeftAlign(ScreenPos, VirtualShadowMap.MaxPhysicalPages);
	ScreenPos = ShaderPrintNewline(ScreenPos);

	ScreenPos.x = ItemX;
	ScreenPos = ShaderPrintSymbol(ScreenPos, _P_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _A_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _G_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _E_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _S_);
	ScreenPos.x = ValueX;
	ScreenPos = ShaderPrintLeftAlign(ScreenPos, InStatsBuffer[0]);
	ScreenPos = ShaderPrintNewline(ScreenPos);

	ScreenPos.x = ItemX;
	ScreenPos = ShaderPrintSymbol(ScreenPos, _C_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _A_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _C_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _H_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _E_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _D_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _P_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _A_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _G_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _E_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _S_);
	ScreenPos.x = ValueX;
	ScreenPos = ShaderPrintLeftAlign(ScreenPos, InStatsBuffer[1]);
	ScreenPos = ShaderPrintNewline(ScreenPos);

	ScreenPos.x = ItemX;
	ScreenPos = ShaderPrintSymbol(ScreenPos, _C_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _A_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _C_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _H_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _E_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _D_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _P_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _E_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _R_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _C_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _T_);
	ScreenPos.x = ValueX;
	if (InStatsBuffer[0])
	{
		ScreenPos = ShaderPrintLeftAlign(ScreenPos, (InStatsBuffer[1] * 100) / InStatsBuffer[0]);
	}
	ScreenPos = ShaderPrintNewline(ScreenPos);

	ScreenPos.x = ItemX;
	ScreenPos = ShaderPrintSymbol(ScreenPos, _D_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _Y_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _N_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _I_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _N_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _V_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _A_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _L_);
	ScreenPos.x = ValueX;
	ScreenPos = ShaderPrintLeftAlign(ScreenPos, InStatsBuffer[2]);
	ScreenPos = ShaderPrintNewline(ScreenPos);
}


uint ShadowMapIdRangeStart;
uint ShadowMapIdRangeEnd;

[numthreads(1, 1, 1)]
void PrintClipmapStats()
{
	float TopMargin = 0.35f;
	float HeadlineX = 0.07f;
	float ItemX = 0.08f;

	// Main Pass
	float2 ScreenPos = float2(HeadlineX, TopMargin);
	ScreenPos.x = ItemX;
	ScreenPos = ShaderPrintSymbol(ScreenPos, _P_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _A_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _G_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _E_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _R_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _E_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _C_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _T_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _S_);
	ScreenPos = ShaderPrintNewline(ScreenPos);
	uint TotalArea = 0U;
	{
		for (uint SmId = ShadowMapIdRangeStart; SmId < ShadowMapIdRangeEnd; ++SmId)
		{
			uint4 Rect = PageRectBounds[SmId * VSM_MAX_MIP_LEVELS];
			ScreenPos.x = ItemX;
			ScreenPos = ShaderPrint(ScreenPos, Rect.x);//ShaderPrintLeftAlign(ScreenPos, Rect.x);
			ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
			ScreenPos = ShaderPrint(ScreenPos, Rect.y);//ShaderPrintLeftAlign(ScreenPos, Rect.y);
			ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
			ScreenPos = ShaderPrint(ScreenPos, Rect.z);//ShaderPrintLeftAlign(ScreenPos, Rect.z);
			ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
			ScreenPos = ShaderPrint(ScreenPos, Rect.w);//ShaderPrintLeftAlign(ScreenPos, Rect.w);
			if (Rect.x <= Rect.z && Rect.y <= Rect.w)
			{
				ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
				ScreenPos = ShaderPrint(ScreenPos, Rect.z - Rect.x + 1);//ShaderPrintLeftAlign(ScreenPos, Rect.z);
				ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
				ScreenPos = ShaderPrint(ScreenPos, Rect.w - Rect.y + 1);//ShaderPrintLeftAlign(ScreenPos, Rect.w);

				uint Area = (Rect.z - Rect.x + 1) * (Rect.w - Rect.y + 1);
				ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
				ScreenPos = ShaderPrint(ScreenPos, Area);//ShaderPrintLeftAlign(ScreenPos, Rect.w);

				TotalArea += Area;
			}
			ScreenPos = ShaderPrintNewline(ScreenPos);
		}
	}
	ScreenPos.x = ItemX;
	ScreenPos = ShaderPrintSymbol(ScreenPos, _T_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _O_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _T_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _A_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _L_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _A_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _R_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _E_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _A_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
	ScreenPos = ShaderPrint(ScreenPos, TotalArea);//ShaderPrintLeftAlign(ScreenPos, Rect.x);
	ScreenPos = ShaderPrintNewline(ScreenPos);

	ScreenPos.x = ItemX;
	ScreenPos = ShaderPrintSymbol(ScreenPos, _A_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _L_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _C_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _D_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _R_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _E_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _C_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _T_);
	ScreenPos = ShaderPrintSymbol(ScreenPos, _S_);
	ScreenPos = ShaderPrintNewline(ScreenPos);
	for (uint SmId = ShadowMapIdRangeStart; SmId < ShadowMapIdRangeEnd; ++SmId)
	{
		uint4 Rect = AllocatedPageRectBounds[SmId * VSM_MAX_MIP_LEVELS];
		ScreenPos.x = ItemX;
		ScreenPos = ShaderPrint(ScreenPos, Rect.x);//ShaderPrintLeftAlign(ScreenPos, Rect.x);
		ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
		ScreenPos = ShaderPrint(ScreenPos, Rect.y);//ShaderPrintLeftAlign(ScreenPos, Rect.y);
		ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
		ScreenPos = ShaderPrint(ScreenPos, Rect.z);//ShaderPrintLeftAlign(ScreenPos, Rect.z);
		ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
		ScreenPos = ShaderPrint(ScreenPos, Rect.w);//ShaderPrintLeftAlign(ScreenPos, Rect.w);
		if (Rect.x <= Rect.z && Rect.y <= Rect.w)
		{
			ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
			ScreenPos = ShaderPrint(ScreenPos, Rect.z - Rect.x + 1);//ShaderPrintLeftAlign(ScreenPos, Rect.z);
			ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
			ScreenPos = ShaderPrint(ScreenPos, Rect.w - Rect.y + 1);//ShaderPrintLeftAlign(ScreenPos, Rect.w);

			uint Area = (Rect.z - Rect.x + 1) * (Rect.w - Rect.y + 1);
			ScreenPos = ShaderPrintSymbol(ScreenPos, _SPC_);
			ScreenPos = ShaderPrint(ScreenPos, Area);//ShaderPrintLeftAlign(ScreenPos, Rect.w);

			TotalArea += Area;
		}
		ScreenPos = ShaderPrintNewline(ScreenPos);
	}

}
